name: PRE-RELEASE [PRE-PRODUCTION] - Create Pre-Release PR

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Pre-Release version (e.g: 1.0.1)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  check_pre_release_needed:
    name: Check if Pre-Release is Needed
    runs-on: ubuntu-latest
    outputs:
      needs_pre_release: ${{ steps.pre_release_check.outputs.needs_pre_release }}

    steps:
      - name: Checkout dev Branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Check if pre-release is needed
        id: pre_release_check
        run: |
          git fetch origin pre-production dev

          AHEAD_COUNT=$(git rev-list --count origin/pre-production..origin/dev)

          if [ "$AHEAD_COUNT" -eq 0 ]; then
            echo "❌ No pre-release needed: pre-production and dev are up to date"
            echo "needs_pre_release=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Pre-release needed: pre-production is $AHEAD_COUNT commits behind dev"
            echo "needs_pre_release=true" >> $GITHUB_OUTPUT
          fi

  verify_translations:
    name: Verify Translations Completeness
    runs-on: ubuntu-latest
    needs: check_pre_release_needed
    if: needs.check_pre_release_needed.outputs.needs_pre_release == 'true'

    steps:
      - name: Checkout dev Branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Extract translations
        run: npm run extract-translations

      - name: Verify translations completeness
        run: |
          set -e
          BASE_PATH="src/resources/i18n"
          LANGS=($(find "$BASE_PATH" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;))

          for LANG in "${LANGS[@]}"; do
            FILE="$BASE_PATH/$LANG/translation.json"
            if [ ! -f "$FILE" ]; then
              echo "❌ File not found: $FILE"
              exit 1
            fi
            MISSING=$(jq -r 'paths as $p | select(getpath($p) == "MISSING_TRANSLATION") | $p | join(".")' "$FILE")
            if [ -n "$MISSING" ]; then
              echo "❌ Missing translations in $LANG:"
              echo "$MISSING"
              exit 1
            fi
          done

          echo "✅ All translations are complete"

  prepare_pre_release_branch:
    name: Prepare Pre-Release Branch
    runs-on: ubuntu-latest
    needs: [check_pre_release_needed, verify_translations]
    if: needs.check_pre_release_needed.outputs.needs_pre_release == 'true'
    env:
      RELEASE_VERSION: ${{ inputs.release_version }}
    outputs:
      branch_name: ${{ steps.set_branch.outputs.branch_name }}

    steps:
      - name: Checkout dev Branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Pre-Release Branch
        id: set_branch
        run: |
          BRANCH_NAME="pre-release/${RELEASE_VERSION}"

          # Delete local branch if exists
          if git show-ref --quiet refs/heads/$BRANCH_NAME; then
            git branch -D "$BRANCH_NAME"
          fi

          # Delete remote branch if exists
          if git show-ref --quiet refs/remotes/origin/$BRANCH_NAME; then
            git push origin --delete "$BRANCH_NAME"
          fi

          # Create fresh branch from dev
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Discard local changes before merge
        run: |
          git checkout .
          echo "Discarded any local changes before merge."

      - name: Merge pre-production into pre-release
        run: |
          git fetch origin pre-production
          if ! git merge origin/pre-production --no-edit; then
            git checkout --ours package.json
            git add package.json
            git commit -m "Resolve package.json conflict: keep pre-release version"
          fi

      - name: Update package.json Version (if needed)
        continue-on-error: true
        run: |
          VERSION_NUMBER=${RELEASE_VERSION#v}
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          echo "📦 Current version: $CURRENT_VERSION"
          echo "🎯 Target version: $VERSION_NUMBER"

          if [ "$CURRENT_VERSION" = "$VERSION_NUMBER" ]; then
            echo "✅ Version is already $VERSION_NUMBER, skipping update"
            exit 0
          fi

          echo "🔄 Updating version from $CURRENT_VERSION to $VERSION_NUMBER"
          npm version "$VERSION_NUMBER" --no-git-tag-version

          if git diff --quiet package.json; then
            echo "ℹ️ No changes in package.json after npm version"
            exit 0
          fi

          git add package.json package-lock.json 2>/dev/null || git add package.json
          git commit -m "chore: bump version to $VERSION_NUMBER [skip ci]"
          git push origin "${{ steps.set_branch.outputs.branch_name }}"
          echo "✅ Version updated and pushed successfully"

  create_pre_release_pr:
    name: Create Pre-Release Pull Request
    runs-on: ubuntu-latest
    needs: [check_pre_release_needed, prepare_pre_release_branch]
    if: needs.check_pre_release_needed.outputs.needs_pre_release == 'true'
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ inputs.release_version }}

    steps:
      - name: Checkout Pre-Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare_pre_release_branch.outputs.branch_name }}
          fetch-depth: 0

      - name: Get Latest Tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | head -1)
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Gather PRs for Pre-Release
        id: pull_requests
        run: |
          git fetch origin pre-production dev
          COMMITS_IN_DEV=$(git log origin/pre-production..origin/dev --pretty=format:"%H")

          PRS=""
          while read commit; do
            MATCHING_PR=$(gh pr list --state merged --base dev --json number,title,author,mergeCommit,url \
              --jq ".[] | select(.mergeCommit.oid==\"$commit\") | \"- [#\(.number)](\(.url)) - \(.title) - @\(.author.login)\"")
            if [ -n "$MATCHING_PR" ]; then
              PRS="$PRS$MATCHING_PR"$'\n'
            fi
          done <<< "$COMMITS_IN_DEV"

          if [ -z "$PRS" ]; then
            PRS="No new PRs to include in pre-release"
          fi

          echo "$PRS" > prs.txt
          echo "prs_file=prs.txt" >> $GITHUB_OUTPUT

      - name: Create PR Body from Template
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          BRANCH_NAME="${{ needs.prepare_pre_release_branch.outputs.branch_name }}"
          PRS=$(cat prs.txt)

          cat > pr_body.md << EOF
          ## PRE-RELEASE $RELEASE_VERSION 🚀

          ### Summary
          This PR prepares PRE-RELEASE **$RELEASE_VERSION**.

          ### Tag Comparison
          **Previous tag:** ${LATEST_TAG}
          **New tag:** $RELEASE_VERSION

          ### Pull Requests Included
          $PRS

          ### Pre-release Checklist
          - [ ] Review all included changes
          - [ ] Verify translations are complete
          - [ ] Confirm version is correct
          - [ ] Test critical functionalities

          ### Next Steps
          Once this PR is approved and merged:
          1. Tag $RELEASE_VERSION will be created automatically
          2. GitHub release notes will be generated
          3. Package.json version will be updated

          ## 🤖 Pre-Release prepared automatically by GitHub Actions by @${{ github.actor }}
          EOF

      - name: Create Pull Request
        run: |
          gh pr create \
            --title "🚀 PRE-RELEASE $RELEASE_VERSION" \
            --body-file pr_body.md \
            --base pre-production \
            --head "${{ needs.prepare_pre_release_branch.outputs.branch_name }}" \
            --label "pre-release" \
            --assignee "${{ github.actor }}"

      - name: Notify Completion
        run: |
          echo "✅ Pre-Release PR created successfully!"
          echo "📋 Version: $RELEASE_VERSION"
          echo "🔗 Check the PR in GitHub to review all changes."
