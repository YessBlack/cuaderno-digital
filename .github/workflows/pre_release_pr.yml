name: PRE-RELEASE - Create Pre-Release PR

on:
  workflow_dispatch:
    inputs:
      rc_version:
        description: "Pre-release version (e.g: 1.1.0-rc1)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  check_pre_release_needed:
    name: Check if Pre-Release is Needed
    runs-on: ubuntu-latest
    outputs:
      needs_pre_release: ${{ steps.pre_release_check.outputs.needs_pre_release }}

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Check if pre-release is needed
        id: pre_release_check
        run: |
          git fetch origin dev pre-production

          AHEAD_COUNT=$(git rev-list --count origin/pre-production..origin/dev)

          if [ "$AHEAD_COUNT" -eq 0 ]; then
            echo "❌ No pre-release needed: pre-production is up to date with dev"
            echo "needs_pre_release=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Pre-release needed: pre-production is $AHEAD_COUNT commits behind dev"
            echo "needs_pre_release=true" >> $GITHUB_OUTPUT
          fi

  gather_prs:
    name: Gather PRs from Dev
    runs-on: ubuntu-latest
    needs: check_pre_release_needed
    if: needs.check_pre_release_needed.outputs.needs_pre_release == 'true'
    outputs:
      prs_file: ${{ steps.save_prs.outputs.prs_file }}

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Fetch commits and find merged PRs
        id: save_prs
        run: |
          git fetch origin dev pre-production
          COMMITS_IN_DEV=$(git log origin/pre-production..origin/dev --pretty=format:"%H")

          PRS=""
          while read commit; do
            MATCHING_PR=$(gh pr list --state merged --base dev --json number,title,author,mergeCommit,url \
              --jq ".[] | select(.mergeCommit.oid==\"$commit\") | \"- [#\(.number)](\(.url)) - \(.title) - @\(.author.login)\"")
            if [ -n "$MATCHING_PR" ]; then
              PRS="$PRS$MATCHING_PR"$'\n'
            fi
          done <<< "$COMMITS_IN_DEV"

          if [ -z "$PRS" ]; then
            PRS="No new PRs to include in pre-release"
          fi

          echo "$PRS" > prs.txt
          echo "prs_file=prs.txt" >> $GITHUB_OUTPUT

  create_pre_release_pr:
    name: Create Pre-Release Pull Request
    runs-on: ubuntu-latest
    needs: gather_prs
    if: needs.check_pre_release_needed.outputs.needs_pre_release == 'true'
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RC_VERSION: ${{ inputs.rc_version }}

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Create PR Body for Pre-Release
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | head -1)
          PRS=$(cat prs.txt)

          cat > pr_body.md << EOF
          ## 🧪 Pre-Release Candidate $RC_VERSION

          ### Summary
          This PR prepares a **pre-release candidate $RC_VERSION** from the dev branch into pre-production for testing.

          ### Tag Comparison
          **Previous tag:** ${LATEST_TAG:-"None"}  
          **Target pre-production branch:** pre-production

          ### Pull Requests Included
          $PRS

          ### Pre-Release Checklist
          - [ ] Review all included changes
          - [ ] Verify translations are complete
          - [ ] Confirm version is correct
          - [ ] Test critical functionalities
          - [ ] QA approval before final release

          ### Next Steps
          Once this PR is approved and merged into pre-production:
          1. Pre-release testing will occur
          2. Any fixes needed will be applied in dev and merged into pre-production
          3. When ready, a final release PR will be created from pre-production to main

          ## 🤖 Pre-release prepared automatically by GitHub Actions by @${{ github.actor }}
          EOF

      - name: Create Pre-Release Pull Request
        run: |
          gh pr create \
            --title "🧪 Pre-Release $RC_VERSION" \
            --body-file pr_body.md \
            --base pre-production \
            --head dev \
            --label "pre-release" \
            --assignee "${{ github.actor }}"

      - name: Notify Completion
        run: |
          echo "✅ Pre-release PR created successfully!"
          echo "🔗 Check the PR in GitHub: pre-production <- dev"
          echo "📋 Version: $RC_VERSION"
