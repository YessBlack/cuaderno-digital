name: RELEASE [PRODUCTION] - Create Release PR

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (e.g: 1.0.1)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      needs_release: ${{ steps.release_check.outputs.needs_release }}
      latest_tag: ${{ steps.latest_tag.outputs.latest_tag }}
      prs_file: ${{ steps.pull_requests.outputs.prs_file }}

    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Check if release is needed
        id: release_check
        run: |
          git fetch origin main develop
          AHEAD_COUNT=$(git rev-list --count origin/main..origin/develop)

          if [ "$AHEAD_COUNT" -eq 0 ]; then
            echo "needs_release=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "needs_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | head -1)
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Get pull requests since latest tag
        id: pull_requests
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          COMMITS_IN_DEVELOP=$(git log --oneline origin/main..origin/develop --pretty=format:"%H")

          if [ -z "$COMMITS_IN_DEVELOP" ]; then
            PRS="No changes to release - develop and main are in sync"
          else
            ALL_DEVELOP_PRS=$(gh pr list --state merged --base develop --limit 50 \
              --json number,title,author,mergeCommit,url \
              --template '{{range .}}{{.number}}:{{.title}}:{{.author.login}}:{{.mergeCommit.oid}}:{{.url}}{{"\n"}}{{end}}')

            PRS=""
            while IFS= read -r commit; do
              MATCHING_PR=$(echo "$ALL_DEVELOP_PRS" | grep ":$commit:" | head -1 || true)
              if [ -n "$MATCHING_PR" ]; then
                PR_NUM=$(echo "$MATCHING_PR" | cut -d: -f1)
                PR_TITLE=$(echo "$MATCHING_PR" | cut -d: -f2)
                PR_AUTHOR=$(echo "$MATCHING_PR" | cut -d: -f3)
                PR_URL=$(echo "$MATCHING_PR" | cut -d: -f5)
                PRS="$PRS- [#$PR_NUM]($PR_URL) - $PR_TITLE - @$PR_AUTHOR"$'\n'
              fi
            done <<< "$COMMITS_IN_DEVELOP"
          fi

          echo "$PRS" > prs.txt
          echo "prs_file=prs.txt" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_branch_and_bump:
    runs-on: ubuntu-latest
    needs: prepare_release
    if: needs.prepare_release.outputs.needs_release == 'true'
    outputs:
      branch_name: ${{ steps.set_branch.outputs.branch_name }}

    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Create release branch
        id: set_branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="release/${{ inputs.release_version }}"
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          VERSION="${{ inputs.release_version }}"
          VERSION_NUMBER=${VERSION#v}

          npm install
          npm version "$VERSION_NUMBER" --no-git-tag-version

          git add package.json
          git commit -m "chore: bump version to $VERSION_NUMBER [skip ci]"
          git push origin "${{ steps.set_branch.outputs.branch_name }}"

  open_pr:
    runs-on: ubuntu-latest
    needs: [prepare_release, create_branch_and_bump]
    if: needs.prepare_release.outputs.needs_release == 'true'

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create_branch_and_bump.outputs.branch_name }}

      - name: Create PR body
        run: |
          LATEST_TAG="${{ needs.prepare_release.outputs.latest_tag }}"
          PRS=$(cat ${{ needs.prepare_release.outputs.prs_file }})

          cat > pr_body.md << EOF
          ## RELEASE ${{ inputs.release_version }} ðŸš€

          ### Summary
          This PR prepares RELEASE **${{ inputs.release_version }}**.

          ### Tag Comparison
          **Previous tag:** ${LATEST_TAG}
          **New tag:** ${{ inputs.release_version }}

          ### Pull Requests Included
          ${PRS}

          ### Pre-release Checklist
          - [ ] Review all included changes
          - [ ] Verify translations are complete
          - [ ] Confirm version is correct
          - [ ] Test critical functionalities

          ### Next Steps
          Once this PR is approved and merged:
          1. Tag ${{ inputs.release_version }} will be created automatically
          2. GitHub release notes will be generated
          3. Package.json version will be updated

          ## ðŸ¤– Release prepared automatically by GitHub Actions by @${{ github.actor }}
          EOF

      - name: Open Pull Request
        run: |
          gh pr create \
            --title "ðŸš€ RELEASE ${{ inputs.release_version }}" \
            --body-file pr_body.md \
            --base main \
            --head "${{ needs.create_branch_and_bump.outputs.branch_name }}" \
            --label "release" \
            --assignee "${{ github.actor }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
