name: RELEASE [PRODUCTION] - Create Release PR

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (e.g., 1.0.0)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  validate:
    name: Validate release requirements
    runs-on: ubuntu-latest
    outputs:
      release_needed: ${{ steps.release_check.outputs.release_needed }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Check if release is needed
        id: release_check
        run: |
          git fetch origin main dev
          AHEAD_COUNT=$(git rev-list --count origin/main..origin/dev)
          if [ "$AHEAD_COUNT" -eq 0 ]; then
            echo "release_needed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "release_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate translations
        id: translations
        run: |
          echo "🔍 Checking translations..."
          if grep -r "MISSING_TRANSLATIONS" src/resources/i18n/*/translation.json; then
            echo "❌ Found missing translations!"
            echo "translations_ok=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ All translations are complete."
            echo "translations_ok=true" >> $GITHUB_OUTPUT
          fi

  prepare:
    name: Prepare release branch
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.release_needed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - run: npm ci

      - name: Create release branch
        run: |
          VERSION=${{ inputs.release_version }}
          BRANCH_NAME="release/$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME"
          npm version "$VERSION" --no-git-tag-version
          git commit -am "chore: bump version to $VERSION [skip ci]"
          git push origin "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

  update-version:
    name: Update version in package.json
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update package.json version
        run: |
          # Update version in package.json
          VERSION="${{ inputs.release_version }}"
          # Ensure clean version number (remove 'v' prefix if present)
          VERSION_NUMBER=${VERSION#v}

          # Update package.json version
          npm version "$VERSION_NUMBER" --no-git-tag-version

          # Commit the version change
          git add package.json
          git commit -m "chore: bump version to $VERSION_NUMBER [skip ci]"
          git push origin "${{ env.BRANCH_NAME }}"

  pr:
    name: Create release Pull Request
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog (merged PRs from dev)
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed",
              base: "dev"
            });
            const merged = prs.filter(pr => pr.merged_at);
            const changelog = merged
              .map(pr => `- #${pr.number} ${pr.title} (@${pr.user.login})`)
              .join("\n");

            core.setOutput("result", changelog);

      - name: Create Pull Request
        run: |
          BRANCH_NAME="release/${{ inputs.release_version }}"

          cat > pr_body.md << EOF
          ## RELEASE ${{ inputs.release_version }} 🚀

          ### Summary
          This PR prepares RELEASE **${{ inputs.release_version }}**.

          ### Tag Comparison
          **Previous tag:** ${{ steps.latest_tag.outputs.latest_tag }}
          **New tag:** ${{ inputs.release_version }}

          ### Pull Requests Included
          ${{ steps.changelog.outputs.result }}

          ### Pre-release Checklist
          - [ ] Review all included changes
          - [ ] Verify translations are complete
          - [ ] Confirm version is correct
          - [ ] Test critical functionalities

          ### Next Steps
          Once this PR is approved and merged:
          1. Tag ${{ inputs.release_version }} will be created automatically
          2. GitHub release notes will be generated
          3. Package.json version will be updated

          ## 🤖 Release prepared automatically by GitHub Actions by @${{ github.actor }}
          EOF

          gh pr create \
            --title "🚀 RELEASE ${{ inputs.release_version }}" \
            --body-file pr_body.md \
            --base main \
            --head "$BRANCH_NAME" \
            --label "release" \
            --assignee "${{ github.actor }}"
        env:
          GH_TOKEN: ${{ github.token }}
