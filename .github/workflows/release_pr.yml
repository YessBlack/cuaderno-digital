name: RELEASE [PRODUCTION] - Create Release PR

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (e.g: 1.0.1)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  check_release_needed:
    name: Check if Release is Needed
    runs-on: ubuntu-latest
    outputs:
      needs_release: ${{ steps.release_check.outputs.needs_release }}

    steps:
      - name: Checkout Dev Branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Check if release is needed
        id: release_check
        run: |
          git fetch origin main dev

          AHEAD_COUNT=$(git rev-list --count origin/main..origin/dev)

          if [ "$AHEAD_COUNT" -eq 0 ]; then
            echo "❌ No release needed: main and dev are up to date"
            echo "needs_release=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Release needed: main is $AHEAD_COUNT commits behind dev"
            echo "needs_release=true" >> $GITHUB_OUTPUT

  verify-translations:
    name: Verify Translations Completeness
    runs-on: ubuntu-latest
    needs: check_release_needed
    if: needs.check_release_needed.outputs.needs_release == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Extract translations
        run: npm run extract-translations

      - name: Verify translations completeness
        run: |
          set -e
          BASE_PATH="src/resources/i18n"

          # Detectar automáticamente todos los idiomas
          LANGS=($(find "$BASE_PATH" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;))

          for LANG in "${LANGS[@]}"; do
            FILE="$BASE_PATH/$LANG/translation.json"
            
            if [ ! -f "$FILE" ]; then
              echo "❌ Archivo no encontrado: $FILE"
              exit 1
            fi
            
            # Buscar valores MISSING_TRANSLATION en cualquier clave
            MISSING=$(jq -r 'paths as $p | select(getpath($p) == "MISSING_TRANSLATION") | $p | join(".")' "$FILE")
            
            if [ -n "$MISSING" ]; then
              echo "❌ Traducciones faltantes en $LANG:"
              echo "$MISSING"
              exit 1
            fi
          done

          echo "✅ Todas las traducciones están completas"

  prepare_release_branch:
    name: Prepare Release Branch
    runs-on: ubuntu-latest
    needs: verify-translations
    if: needs.verify-translations.outputs.needs_release == 'true'
    env:
      RELEASE_VERSION: ${{ inputs.release_version }}
    outputs:
      branch_name: ${{ steps.set_branch.outputs.branch_name }}

    steps:
      - name: Checkout Dev Branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Release Branch
        id: set_branch
        run: |
          BRANCH_NAME="release/${RELEASE_VERSION}"

          # Delete local branch if exists
          if git show-ref --quiet refs/heads/$BRANCH_NAME; then
            git branch -D "$BRANCH_NAME"
          fi

          # Delete remote branch if exists
          if git show-ref --quiet refs/remotes/origin/$BRANCH_NAME; then
            git push origin --delete "$BRANCH_NAME"
          fi

          # Create fresh branch from dev
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Update package.json Version
        run: |
          VERSION_NUMBER=${RELEASE_VERSION#v}
          npm version "$VERSION_NUMBER" --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to $VERSION_NUMBER [skip ci]"
          git push origin "${{ steps.set_branch.outputs.branch_name }}"

  create_release_pr:
    name: Create Release Pull Request
    runs-on: ubuntu-latest
    needs: prepare_release_branch
    if: needs.check_release_needed.outputs.needs_release == 'true'
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ inputs.release_version }}

    steps:
      - name: Checkout Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare_release_branch.outputs.branch_name }}
          fetch-depth: 0

      - name: Get Latest Tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | head -1)
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Found latest tag: ${LATEST_TAG}"

      - name: Gather PRs for Release
        id: pull_requests
        run: |
          # Fetch commits in dev not in main
          git fetch origin main dev
          COMMITS_IN_DEV=$(git log origin/main..origin/dev --pretty=format:"%H")

          PRS=""
          while read commit; do
            MATCHING_PR=$(gh pr list --state merged --base dev --json number,title,author,mergeCommit,url \
              --jq ".[] | select(.mergeCommit.oid==\"$commit\") | \"- [#\(.number)](\(.url)) - \(.title) - @\(.author.login)\"")
            if [ -n "$MATCHING_PR" ]; then
              PRS="$PRS$MATCHING_PR"$'\n'
            fi
          done <<< "$COMMITS_IN_DEV"

          if [ -z "$PRS" ]; then
            PRS="No new PRs to include in release"
          fi

          echo "$PRS" > prs.txt
          echo "prs_file=prs.txt" >> $GITHUB_OUTPUT

      - name: Create PR Body from Template
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          BRANCH_NAME="${{ needs.prepare_release_branch.outputs.branch_name }}"
          PRS=$(cat prs.txt)

          cat > pr_body.md << EOF
          ## RELEASE $RELEASE_VERSION 🚀

          ### Summary
          This PR prepares RELEASE **$RELEASE_VERSION**.

          ### Tag Comparison
          **Previous tag:** ${LATEST_TAG}
          **New tag:** $RELEASE_VERSION

          ### Pull Requests Included
          $PRS

          ### Pre-release Checklist
          - [ ] Review all included changes
          - [ ] Verify translations are complete
          - [ ] Confirm version is correct
          - [ ] Test critical functionalities

          ### Next Steps
          Once this PR is approved and merged:
          1. Tag $RELEASE_VERSION will be created automatically
          2. GitHub release notes will be generated
          3. Package.json version will be updated

          ## 🤖 Release prepared automatically by GitHub Actions by @${{ github.actor }}
          EOF

      - name: Create Pull Request
        run: |
          gh pr create \
            --title "🚀 RELEASE $RELEASE_VERSION" \
            --body-file pr_body.md \
            --base main \
            --head "${{ needs.prepare_release_branch.outputs.branch_name }}" \
            --label "release" \
            --assignee "${{ github.actor }}"

      - name: Notify Completion
        run: |
          echo "✅ Release PR created successfully!"
          echo "📋 Version: $RELEASE_VERSION"
          echo "🔗 Check the PR in GitHub to review all changes."
