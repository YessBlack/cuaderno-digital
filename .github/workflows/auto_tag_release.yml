name: RELEASE [PRODUCTION] - Tag Creation

on:
  pull_request_target:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  create_tag:
    runs-on: ubuntu-latest
    if: |
      ((github.event_name == 'pull_request_target' || github.event_name == 'pull_request') &&
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'release')) ||
      (github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract release info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger: calculate next version
            LATEST=$(git tag --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
            
            if [ -z "$LATEST" ]; then
              VERSION="1.0.0"
            else
              MAJOR=$(echo "$LATEST" | cut -d. -f1)
              MINOR=$(echo "$LATEST" | cut -d. -f2)
              PATCH=$(echo "$LATEST" | cut -d. -f3)
              NEW_PATCH=$((PATCH + 1))
              VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              
              # If tag exists, increment patch until a free version is found
              while git rev-parse "$VERSION" >/dev/null 2>&1; do
                NEW_PATCH=$((NEW_PATCH + 1))
                VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              done
            fi
            
            RELEASE_NAME="Manual Release $(date +'%Y%m%d')"
            
          else
            # PR: extract version from title
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            VERSION=$(echo "$PR_TITLE" | grep -oP 'RELEASE\s+(v?[0-9]+\.[0-9]+\.[0-9]+)' | sed 's/RELEASE\s*//' | sed 's/^v//')
            RELEASE_NAME="Release"

            if [ -z "$VERSION" ]; then
              echo "❌ No se pudo extraer versión del título: $PR_TITLE"
              exit 1
            fi
            
            if git rev-parse "$VERSION" >/dev/null 2>&1; then
              echo "❌ Tag $VERSION ya existe"
              exit 1
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV=$(git tag --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
          echo "prev_tag=${PREV}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          PREV="${{ steps.prev_tag.outputs.prev_tag }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_BODY="Release manual creado por @${{ github.actor }}"
          else
            PR_BODY="${{ github.event.pull_request.body }}"
          fi

          cat > notes.md << EOF
          ## 🚀 Version $VERSION

          **Previous:** ${PREV:-First release}
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          $PR_BODY
          EOF

          echo "notes_file=notes.md" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          gh release create "$VERSION" \
            --title "🚀 Release ($VERSION)" \
            --notes-file notes.md \
            --verify-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
