name: RELEASE [PRODUCTION] - Auto Tag and Release Notes

on:
  pull_request_target:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  create_tag:
    runs-on: ubuntu-latest
    if: |
      ((github.event_name == 'pull_request_target' || github.event_name == 'pull_request') &&
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'release')) ||
      (github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract release info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual dispatch: generate version automatically
            LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^1\.[0-9]+\.[0-9]+$' | head -1)
            
            if [ -z "$LATEST_TAG" ]; then
              # No tags exist, start with 1.0.0
              VERSION="1.0.0"
            else
              # Increment patch version
              CURRENT_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
              MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
              MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
              PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
              NEW_PATCH=$((PATCH + 1))
              VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            fi
            
            RELEASE_NAME="Manual Release $(date +'%Y%m%d')"
            echo "🔧 Manual dispatch: Generated version $VERSION"
            
          else
            # PR merge: extract from PR title
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_BODY="${{ github.event.pull_request.body }}"

            # Extract version from PR title (format: "🚀 RELEASE v1.0.1" or "🚀 RELEASE 1.0.1")
            VERSION=$(echo "$PR_TITLE" | grep -oP 'RELEASE\s+(v?[0-9]+\.[0-9]+\.[0-9]+)' | sed 's/RELEASE\s*//')
            
            # Remove 'v' prefix if present - we want clean version numbers
            VERSION=$(echo "$VERSION" | sed 's/^v//')

            # Extract release name from PR title (just use "Release" as default)
            RELEASE_NAME="Release"

            if [ -z "$VERSION" ]; then
              echo "❌ Could not extract version from PR title: $PR_TITLE"
              exit 1
            fi
            
            echo "📝 PR merge: Extracted version $VERSION from title"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "✅ Version: $VERSION"
          echo "✅ Release name: $RELEASE_NAME"

      - name: Get latest tag for comparison
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^1\.[0-9]+\.[0-9]+$' | head -1)
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Previous tag: ${LATEST_TAG}"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          RELEASE_NAME="${{ steps.release_info.outputs.release_name }}"
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"

          # Set variables based on trigger type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TRIGGER_TYPE="Manual dispatch"
            PR_INFO="N/A (Manual trigger)"
            PR_AUTHOR="${{ github.actor }}"
            IMPLEMENTATION_TEXT="This release was created manually via workflow dispatch by @${{ github.actor }}."
          else
            TRIGGER_TYPE="PR merge"
            PR_INFO="[#${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            IMPLEMENTATION_TEXT="This release was created automatically after merging [PR #${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})."

            # Extract PR body which contains the PR list from release_pr workflow
            PR_BODY="${{ github.event.pull_request.body }}"
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 Version $VERSION

          ### Release Information
          - **Version:** $VERSION
          - **Previous tag:** ${LATEST_TAG:-"First release"}
          - **Trigger:** $TRIGGER_TYPE
          - **Pull Request:** $PR_INFO
          - **Author:** @$PR_AUTHOR
          - **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ### Release Notes
          $PR_BODY

          $IMPLEMENTATION_TEXT

          **Generated automatically by GitHub Actions** 🤖
          EOF

          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"

          # Create tag using GitHub API (this ensures "verified" badge)
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/git/refs \
            -f ref="refs/tags/$VERSION" \
            -f sha="${{ github.sha }}"

          echo "✅ Tag $VERSION created successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          RELEASE_NAME="${{ steps.release_info.outputs.release_name }}"

          # Create release using GitHub CLI
          gh release create "$VERSION" \
            --title "🚀 $RELEASE_NAME ($VERSION)" \
            --notes-file release_notes.md \
            --verify-tag
            
          echo "✅ GitHub Release created: $VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          RELEASE_NAME="${{ steps.release_info.outputs.release_name }}"

          echo "🎉 Release process completed successfully!"
          echo "📋 Tag: $VERSION created and pushed successfully for $RELEASE_NAME: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
