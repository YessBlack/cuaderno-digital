name: CI Test
run-name: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.run_number }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: dist

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        run: firebase deploy --only hosting --non-interactive
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          body: "🚀 Deploy completed from commit ${{ github.sha }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: dev

      - name: Merge main into dev
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git merge origin/main --no-ff -m "chore: sync main into dev after release [skip ci]"
          git push origin dev

  notifications:
    runs-on: ubuntu-latest
    needs: [lint, test, build, deploy]
    steps:
      - name: Notify Deployment Result
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            MESSAGE="✅ *Deployment succeeded!* The project was successfully deployed to Firebase Hosting."
          else
            MESSAGE="❌ *Deployment failed!* Please check the GitHub Actions logs."
          fi

          # Enviar mensaje a Slack si el webhook está configurado
          if [ -n "${SLACK_WEBHOOK}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \"${MESSAGE}\"}" \
              "$SLACK_WEBHOOK"
          else
            echo "No Slack webhook configured, skipping notification."
          fi
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify PR Info to Slack
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL=${{ github.event.pull_request.html_url }}
          AUTHOR=${{ github.event.pull_request.user.login }}

          MESSAGE=":tada: *Nuevo PR abierto/actualizado* por *${AUTHOR}* \n>*#${PR_NUMBER}* - ${PR_TITLE}\n${PR_URL}"

          if [ -n "${SLACK_WEBHOOK}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \"${MESSAGE}\"}" \
              "$SLACK_WEBHOOK"
          else
            echo "No Slack webhook configured, skipping PR notification."
          fi
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
